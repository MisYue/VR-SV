
    char source_vertMask[] =
        "#version 400 compatibility\n"

		"uniform float radius; \n"

		// 表面高度集中在 z = 0
		"uniform float heightOffset;  \n"
		// 波浪数目
		"uniform float nbWaves;   \n"
		// 波浪参数 (h, omega, kx, ky) 在风的空间中
        "uniform sampler1D wavesSampler;   \n"
        //总方差
        "uniform float seaRoughness;   \n"
		 // 当前时间
        "uniform float time;  \n"

		"uniform vec3 horizon1; \n"
        "uniform vec3 horizon2; \n"

		//"uniform mat4 cameraToOcean; \n"
        //"uniform mat4 screenToCamera; \n"
        //"uniform mat4 cameraToScreen; \n"
		//"uniform mat3 oceanToCamera; \n"
        //"uniform mat4 oceanToWorld; \n"

        "uniform vec2 oceanOffset; \n"

		"uniform vec4 lods; \n"

        // 波长低于NYQUIST_MIN *采样周期 完全衰减
		"#define NYQUIST_MIN 0.5 \n"
		// 波长高于NYQUIST_MAX * 采样周期 不衰减
        "#define NYQUIST_MAX 1.25 \n"

		"const float PI = 3.141592657;\n"
        "const float g = 9.81;\n"

		"out float oceanLod;\n"
		"out vec2 oceanUv; \n"
		"out vec3 oceanP; \n"
		"out vec3 oceanDPdu; \n"
		"out vec3 oceanDPdv; \n"
		"out float oceanSigmaSq; \n"

        "uniform mat4 osg_ViewMatrixInverse; \n"
        "uniform float osg_FrameTime; \n"
        "uniform float ocean_seaLevel; \n"
        "out vec4 osg_FrontColor; \n"
        "out vec4 ocean_mask_tex_coord; \n"

        "out float ocean_v_msl; \n"
        "out float ocean_v_range; \n"
		"out float ocean_dRadius; \n"

		"out float ocean_h_camera; \n"

        "void oe_ocean_vertex(inout vec4 VertexMODEL) \n"
        "{ \n"
        "   osg_FrontColor = gl_Color; \n"

        // 调整海平面顶点 - 挤压法向量 
        //(这个必须完成modelview空间保持精度)
        "   vec4 mvVertex = VertexMODEL; \n"
        "   vec3 mvNormal = gl_NormalMatrix * gl_Normal; \n"
        "   vec4 mvVertex2 = vec4(mvVertex.xyz + (mvNormal * ocean_seaLevel), mvVertex.w ); \n"

        // ocean mask 纹理坐标:
        "   ocean_mask_tex_coord = gl_MultiTexCoord0; \n"

        // 发送插值参数 to the fs:
        "   vec4 eye = osg_ViewMatrixInverse * vec4(0,0,0,1); \n"

        // 相机海拔高度:
        "   ocean_v_msl = length(eye.xyz/eye.w) - 6378137.0 + ocean_seaLevel; \n"

        // 到相机的距离:
        "   ocean_v_range = ocean_v_msl; \n"

        "   vec4 worldVertex = osg_ViewMatrixInverse * mvVertex; \n"

		"   float t;\n"
		"   vec3 vertex = mvVertex.xyz/mvVertex.w; \n"
		"   float dRadius = length(worldVertex.xyz/worldVertex.w) + ocean_seaLevel;\n"

		"   vec3 uz = normalize(eye.xyz/eye.w);\n"
		"   vec3 ux = normalize( cross(vec3(0.0, 0.0, 1.0), uz) );\n"
		"   vec3 uy = normalize( cross(uz, ux) );\n"

		"   vec3 oo = dRadius * uz ;\n"
		"   mat4 ltoo = mat4(ux.x, uy.x, uz.x, 0.0,\n"
		" 					 ux.y, uy.y, uz.y, 0.0,\n"
		" 					 ux.z, uy.z, uz.z, 0.0,\n"
		" 					-dot(ux,oo), -dot(uy,oo), -dot(uz,oo), 1.0);\n"

		"   mat4 ctoo = ltoo * osg_ViewMatrixInverse;\n"
        "   vec3 cameraDir = normalize(vertex);\n"
        "   vec3 oceanDir = (ctoo * vec4(cameraDir, 0.0)).xyz;\n"
		
		"   vec4 oc = ctoo * vec4(0,0,0,1);\n"

		"    float cz = oc.z;\n"
		"    ocean_h_camera = cz;\n"

        "    float dz = oceanDir.z;\n"
		 "   {\n"
            "    float b = dz * (cz + dRadius);\n"
            "    float c = cz * (cz + 2.0 * dRadius);\n"
            "    float tSphere = - b - sqrt(max(b * b - c, 0.0));\n"
            "    float tApprox = - cz / dz * (1.0 + cz / (2.0 * dRadius) * (1.0 - dz * dz));\n"
            "    t = abs((tApprox - tSphere) * dz) < 1.0 ? tApprox : tSphere;\n"
        "    }\n"

        "   vec2 uv = oceanOffset.xy + t * oceanDir.xy;\n" 

		//一个单元网格的大小, 投影到海洋表面
        "   float lod = - t / oceanDir.z * lods.y;\n"
        "   vec3 dP = vec3(0.0, 0.0, heightOffset);\n"
		"   vec3 dPdu = vec3(1.0, 0.0, 0.0);\n"
		"   vec3 dPdv = vec3(0.0, 1.0, 0.0);\n"
		"   float sigmaSq = seaRoughness;\n"

	    "   {\n"
			"   float iMin = max(floor((log2(NYQUIST_MIN * lod) - lods.z) * lods.w), 0.0);\n"
            "   for (float i = iMin; i < nbWaves; ++i) \n"
		    "   {\n"
                "   vec4 wt = textureLod(wavesSampler, (i + 0.5) / nbWaves, 0.0);\n"
                "   float phase = wt.y * time  - dot(wt.zw, uv) ;\n"
                "   float s = sin(phase);\n"
                "   float c = cos(phase);\n"
                "   float overk = g / (wt.y * wt.y);\n"

                "   float wm = smoothstep(NYQUIST_MIN, NYQUIST_MAX, (2.0 * PI) * overk );\n"
                "   vec3 factor = wm * wt.x * vec3(wt.zw * overk, 1.0);\n"

                "   dP += factor * vec3(s, s, c);\n"

				"   vec3 dPd = factor * vec3(c, c, -s);\n"
                "   dPdu -= dPd * wt.z;\n"
				"   dPdv -= dPd * wt.w;\n"

				"   wt.zw *= overk;\n"
				"   float kh = wt.x / overk;\n"
				"   sigmaSq -= wt.z * wt.z * (1.0 - sqrt(1.0 - kh * kh));\n"

            "   }\n"
        "   }\n"

		"   if(distance(worldVertex.xyz/worldVertex.w, eye.xyz/eye.w) < 10000.0)\n"
		"   {\n"
		"		mat3 otoc = mat3(ctoo[0][0], ctoo[1][0], ctoo[2][0],\n"
		" 						 ctoo[0][1], ctoo[1][1], ctoo[2][1],\n"
		" 						 ctoo[0][2], ctoo[1][2], ctoo[2][2]);\n"

		"		VertexMODEL = vec4(t * cameraDir + otoc * dP, 1.0);\n"
		"   }\n"
		"   else\n"
		"   {\n"
		"		VertexMODEL = mvVertex2;\n"
		"   }\n"

		  "   vec3 p = t * oceanDir + dP + vec3(0.0, 0.0, cz);\n"
		  "  {\n"
		  "		dPdu += vec3(0.0, 0.0, -p.x / (dRadius + p.z));\n"
		  "		dPdv += vec3(0.0, 0.0, -p.y / (dRadius + p.z));\n"
		  "	  }\n"

		  "	  oceanLod = lod;\n"
		  "	  oceanUv = uv;\n"
		  "	  oceanP = p;\n"
		  "	  oceanDPdu = dPdu;\n"
		  "	  oceanDPdv = dPdv;\n"
		  "	  oceanSigmaSq = sigmaSq;\n"
		  "	  ocean_dRadius = dRadius;\n"

        "} \n";


    char source_fragMask[] = 

		"#version 400 compatibility\n"
		"#extension GL_EXT_gpu_shader4 : enable\n"

		"uniform vec4 lods; \n"
		"uniform float time;  \n"

		"uniform vec3 seaColor; \n"

		"uniform vec3 oceanSunDir; \n"

		"uniform float hdrExposure; \n"

		"#define NYQUIST_MIN 0.5 \n"
        "#define NYQUIST_MAX 1.25 \n"

		"const float PI = 3.141592657;\n"
        "const float g = 9.81;\n"

		"in float oceanLod;\n"
		"in vec2 oceanUv;\n"
		"in vec3 oceanP;\n"
		"in vec3 oceanDPdu;\n"
		"in vec3 oceanDPdv;\n"
		"in float oceanSigmaSq;\n"

		"in float ocean_dRadius; \n"
		"in float ocean_h_camera; \n"

		"#define OPTIMIZE\n"
		"#define ATMO_FULL\n"
		"#define HORIZON_HACK\n"

		"#define SUN_INTENSITY 100.0\n"

		"const int TRANSMITTANCE_W = 256;\n"
		"const int TRANSMITTANCE_H = 64;\n"

		"const int SKY_W = 64;\n"
		"const int SKY_H = 16;\n"

		"const int RES_R = 32;\n"
		"const int RES_MU = 128;\n"
		"const int RES_MU_S = 32;\n"
		"const int RES_NU = 8;\n"

		"#define TRANSMITTANCE_NON_LINEAR\n"
		"#define INSCATTER_NON_LINEAR\n"

		"const float SCALE = 1000.0;\n"

		"const float Rg = 6360.0 * SCALE;\n"
		"const float Rt = 6420.0 * SCALE;\n"
		"const float RL = 6421.0 * SCALE;\n"

		// Rayleigh
		"const float HR = 8.0 * SCALE;\n"
		"const vec3 betaR = vec3(5.8e-3, 1.35e-2, 3.31e-2) / SCALE;\n"

		// Mie
		// DEFAULT
		"const float HM = 1.2 * SCALE;\n"
		"const vec3 betaMSca = vec3(4e-3) / SCALE;\n"
		"const vec3 betaMEx = (vec3(4e-3) / SCALE) / 0.9;\n"
		"const float mieG = 0.8;\n"

		"uniform sampler2D transmittanceSampler;\n"
		"uniform sampler2D skyIrradianceSampler;\n"
		"uniform sampler3D inscatterSampler;\n"

		"vec2 getTransmittanceUV(float r, float mu) {\n"
		"	float uR, uMu;\n"
		"#ifdef TRANSMITTANCE_NON_LINEAR\n"
		"	uR = sqrt((r - Rg) / (Rt - Rg));\n"
		"	uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;\n"
		"#else\n"
		"	uR = (r - Rg) / (Rt - Rg);\n"
		"	uMu = (mu + 0.15) / (1.0 + 0.15);\n"
		"#endif\n"
		"	return vec2(uMu, uR);\n"
		"}\n"

		"vec2 getIrradianceUV(float r, float muS) {\n"
		"	float uR = (r - Rg) / (Rt - Rg);\n"
		"	float uMuS = (muS + 0.2) / (1.0 + 0.2);\n"
		"	return vec2(uMuS, uR);\n"
		"}\n"

		"vec3 transmittance(float r, float mu) {\n"
		"	vec2 uv = getTransmittanceUV(r, mu);\n"
		"	return texture2D(transmittanceSampler, uv).rgb;\n"
		"}\n"

		"vec3 irradiance(sampler2D sampler, float r, float muS) {\n"
		"	vec2 uv = getIrradianceUV(r, muS);\n"
		"	return texture2D(sampler, uv).rgb;\n"
		"}\n"

		"vec3 transmittanceWithShadow(float r, float mu) {\n"
		"return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? vec3(0.0) : transmittance(r, mu);\n"
		"}\n"

		"vec3 sunRadiance(float r, float muS) {\n"
		"#if defined(ATMO_SUN_ONLY) || defined(ATMO_FULL)\n"
		"	return transmittanceWithShadow(r, muS) * SUN_INTENSITY;\n"
		"#elif defined(ATMO_NONE)\n"
		"	return vec3(SUN_INTENSITY);\n"
		"#else\n"
		"	return vec3(0.0);\n"
		"#endif\n"
		"}\n"

		"vec3 skyIrradiance(float r, float muS) {\n"
		"#if defined(ATMO_SKY_ONLY) || defined(ATMO_FULL)\n"
		"	return irradiance(skyIrradianceSampler, r, muS) * SUN_INTENSITY;\n"
		"#else\n"
		"	return vec3(0.0);\n"
		"#endif\n"
		"}\n"

		// Rayleigh phase function
		"float phaseFunctionR(float mu) {\n"
		"	return (3.0 / (16.0 * PI)) * (1.0 + mu * mu);\n"
		"}\n"

		// Mie phase function
		"float phaseFunctionM(float mu) {\n"
		"	return 1.5 * 1.0 / (4.0 * PI) * (1.0 - mieG*mieG) * pow(1.0 + (mieG*mieG) - 2.0*mieG*mu, -3.0/2.0) * (1.0 + mu * mu) / (2.0 + mieG*mieG);\n"
		"}\n"

		// approximated single Mie scattering (cf. approximate Cm in paragraph "Angular precision")
		"vec3 getMie(vec4 rayMie) { \n"
		"	return rayMie.rgb * rayMie.w / max(rayMie.r, 1e-4) * (betaR.r / betaR);\n"
		"}\n"

		"float SQRT(float f, float err) {\n"
		"#ifdef OPTIMIZE\n"
		"	return sqrt(f);\n"
		"#else\n"
		"	return f >= 0.0 ? sqrt(f) : err;\n"
		"#endif\n"
		"}\n"

		"vec4 texture4D(sampler3D table, float r, float mu, float muS, float nu)\n"
		"{\n"
		"	float H = sqrt(Rt * Rt - Rg * Rg);\n"
		"	float rho = sqrt(r * r - Rg * Rg);\n"
		"#ifdef INSCATTER_NON_LINEAR\n"
		"	float rmu = r * mu;\n"
		"	float delta = rmu * rmu - r * r + Rg * Rg;\n"
		"	vec4 cst = rmu < 0.0 && delta > 0.0 ? vec4(1.0, 0.0, 0.0, 0.5 - 0.5 / float(RES_MU)) : vec4(-1.0, H * H, H, 0.5 + 0.5 / float(RES_MU));\n"
		"	float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));\n"
		"	float uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(RES_MU));\n"
 
		"	float uMuS = 0.5 / float(RES_MU_S) + (atan(max(muS, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / float(RES_MU_S));\n"
		"#else\n"
		"	float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));\n"
		"	float uMu = 0.5 / float(RES_MU) + (mu + 1.0) / 2.0 * (1.0 - 1.0 / float(RES_MU));\n"
		"	float uMuS = 0.5 / float(RES_MU_S) + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / float(RES_MU_S));\n"
		"#endif\n"
		"	float lerp = (nu + 1.0) / 2.0 * (float(RES_NU) - 1.0);\n"
		"	float uNu = floor(lerp);\n"
		"	lerp = lerp - uNu;\n"
		"	return texture3D(table, vec3((uNu + uMuS) / float(RES_NU), uMu, uR)) * (1.0 - lerp) +\n"
           "	   texture3D(table, vec3((uNu + uMuS + 1.0) / float(RES_NU), uMu, uR)) * lerp;\n"
		"}\n"

		"vec3 inScattering(vec3 camera, vec3 point, vec3 sundir, out vec3 extinction, float shaftWidth) {\n"
		"#if defined(ATMO_INSCATTER_ONLY) || defined(ATMO_FULL)\n"
		"	vec3 result;\n"
		"	vec3 viewdir = point - camera;\n"
		"	float d = length(viewdir);\n"
		"	viewdir = viewdir / d;\n"
		"	float r = length(camera);\n"
		"	if (r < 0.9 * Rg) {\n"
        "		camera.z += Rg;\n"
        "		point.z += Rg;\n"
        "		r = length(camera);\n"
		"	}\n"
		"	float rMu = dot(camera, viewdir);\n"
		"	float mu = rMu / r;\n"
		"	float r0 = r;\n"
		"	float mu0 = mu;\n"
		"	point -= viewdir * clamp(shaftWidth, 0.0, d);\n"

		"	float deltaSq = SQRT(rMu * rMu - r * r + Rt*Rt, 1e30);\n"
		"	float din = max(-rMu - deltaSq, 0.0);\n"
		"	if (din > 0.0 && din < d) {\n"
        "		camera += din * viewdir;\n"
        "		rMu += din;\n"
        "		mu = rMu / Rt;\n"
        "		r = Rt;\n"
        "		d -= din;\n"
		"	}\n"

		"	if (r <= Rt) {\n"
        "		float nu = dot(viewdir, sundir);\n"
        "		float muS = dot(camera, sundir) / r;\n"

        "		vec4 inScatter;\n"

        "		if (r < Rg + 600.0) {\n"
            "		float f = (Rg + 600.0) / r;\n"
            "		r = r * f;\n"
            "		rMu = rMu * f;\n"
            "		point = point * f;\n"
        "		}\n"

        "		float r1 = length(point);\n"
        "		float rMu1 = dot(point, viewdir);\n"
        "		float mu1 = rMu1 / r1;\n"
        "		float muS1 = dot(point, sundir) / r1;\n"

		"	#ifdef ANALYTIC_TRANSMITTANCE\n"
        "		extinction = min(analyticTransmittance(r, mu, d), 1.0);\n"
		"	#else\n"
        "		if (mu > 0.0) {\n"
            "		extinction = min(transmittance(r, mu) / transmittance(r1, mu1), 1.0);\n"
			"	} else {\n"
            "		extinction = min(transmittance(r1, -mu1) / transmittance(r, -mu), 1.0);\n"
        "		}\n"
		"	#endif\n"

		"	#ifdef HORIZON_HACK\n"
        "		const float EPS = 0.004;\n"
        "		float lim = -sqrt(1.0 - (Rg / r) * (Rg / r));\n"
        "		if (abs(mu - lim) < EPS) {\n"
            "		float a = ((mu - lim) + EPS) / (2.0 * EPS);\n"

            "		mu = lim - EPS;\n"
            "		r1 = sqrt(r * r + d * d + 2.0 * r * d * mu);\n"
            "		mu1 = (r * mu + d) / r1;\n"
            "		vec4 inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);\n"
            "		vec4 inScatter1 = texture4D(inscatterSampler, r1, mu1, muS1, nu);\n"
            "		vec4 inScatterA = max(inScatter0 - inScatter1 * extinction.rgbr, 0.0);\n"

            "		mu = lim + EPS;\n"
            "		r1 = sqrt(r * r + d * d + 2.0 * r * d * mu);\n"
            "		mu1 = (r * mu + d) / r1;\n"
            "		inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);\n"
            "		inScatter1 = texture4D(inscatterSampler, r1, mu1, muS1, nu);\n"
            "		vec4 inScatterB = max(inScatter0 - inScatter1 * extinction.rgbr, 0.0);\n"

            "		inScatter = mix(inScatterA, inScatterB, a);\n"
			"	} else {\n"
            "		vec4 inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);\n"
            "		vec4 inScatter1 = texture4D(inscatterSampler, r1, mu1, muS1, nu);\n"
            "		inScatter = max(inScatter0 - inScatter1 * extinction.rgbr, 0.0);\n"
			"	}\n"
		"	#else\n"
        "		vec4 inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);\n"
        "		vec4 inScatter1 = texture4D(inscatterSampler, r1, mu1, muS1, nu);\n"
        "		inScatter = max(inScatter0 - inScatter1 * extinction.rgbr, 0.0);\n"
		"	#endif\n"
        "		inScatter.w *= smoothstep(0.00, 0.02, muS);\n"

        "		vec3 inScatterM = getMie(inScatter);\n"
        "		float phase = phaseFunctionR(nu);\n"
        "		float phaseM = phaseFunctionM(nu);\n"
        "		result = inScatter.rgb * phase + inScatterM * phaseM;\n"
		"	} else {\n"
        "		result = vec3(0.0);\n"
        "		extinction = vec3(1.0);\n"
		"	}\n"

		"	return result * SUN_INTENSITY;\n"
		"#else\n"
		"	extinction = vec3(1.0);\n"
		"	return vec3(0.0);\n"
		"#endif\n"
		"}\n"

		"void sunRadianceAndSkyIrradiance(vec3 worldP, vec3 worldN, vec3 worldS, out vec3 sunL, out vec3 skyE)\n"
		"{\n"
		"	float r = length(worldP);\n"

		"	vec3 worldV = worldP / r; \n"
		"	float muS = dot(worldV, worldS);\n"
		"	sunL = sunRadiance(r, muS);\n"
		"	skyE = skyIrradiance(r, muS) * (1.0 + dot(worldV, worldN));\n"
		"}\n"

		"float wardReflectedSunRadiance(vec3 L, vec3 V, vec3 N, float sigmaSq) {\n"
		"	vec3 H = normalize(L + V);\n"

		"	float hn = dot(H, N);\n"
		"	float p = exp(-2.0 * ((1.0 - hn * hn) / sigmaSq) / (1.0 + hn)) / (4.0 * PI * sigmaSq);\n"

		"	float c = 1.0 - dot(V, H);\n"
		"	float c2 = c * c;\n"
		"	float fresnel = 0.02 + 0.98 * c2 * c2 * c;\n"

		"	float zL = dot(L, N);\n"
		"	float zV = dot(V, N);\n"
		"	zL = max(zL,0.01);\n"
		"	zV = max(zV,0.01);\n"

		"	return zL <= 0.0 ? 0.0 : max(fresnel * p * sqrt(abs(zL / zV)), 0.0);\n"
		"}\n"

		"float meanFresnel(float cosThetaV, float sigmaV) {\n"
		"	return pow(1.0 - cosThetaV, 5.0 * exp(-2.69 * sigmaV)) / (1.0 + 22.7 * pow(sigmaV, 1.5));\n"
		"}\n"

		"float meanFresnel(vec3 V, vec3 N, float sigmaSq) {\n"
		"	return meanFresnel(dot(V, N), sqrt(sigmaSq));\n"
		"}\n"

		"float refractedSeaRadiance(vec3 V, vec3 N, float sigmaSq) {\n"
		"	return 0.98 * (1.0 - meanFresnel(V, N, sigmaSq));\n"
		"}\n"

		"vec3 hdr(vec3 L) {\n"
		"	L = L * hdrExposure;\n"
		"	L.r = L.r < 1.413 ? pow(L.r * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.r);\n"
		"	L.g = L.g < 1.413 ? pow(L.g * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.g);\n"
		"	L.b = L.b < 1.413 ? pow(L.b * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.b);\n"
		"	return L;\n"
		"}\n"

        // 将value变换到vmin/vmax范围, 然后将它重新映射到r0/r1范围:
        "float ocean_remap( float val, float vmin, float vmax, float r0, float r1 ) \n"
        "{ \n"
        "    float vr = (clamp(val, vmin, vmax)-vmin)/(vmax-vmin); \n"
        "    return r0 + vr * (r1-r0); \n"
        "} \n"

        "in float ocean_v_msl; \n"                  // elevation (MSL) of camera
        "in float ocean_v_range; \n"                // distance from camera to current vertex
        "in vec4 ocean_mask_tex_coord; \n"          // tex coord for the mask texture

        "uniform sampler2D ocean_data; \n"               // ocean mask texture

        "uniform float ocean_seaLevel; \n"               // sea level offset

        "uniform float ocean_max_range; \n"              // 海洋最大的可见距离
        "uniform float ocean_fade_range; \n"             // 在海洋里的消失距离

				// 波浪数目
		"uniform float nbWaves;   \n"
		// 波浪参数 (h, omega, kx, ky) 在风的空间中
        "uniform sampler1D wavesSampler;   \n"

        "void oe_ocean_fragment(inout vec4 color) \n"
        "{ \n"

        // 当相机海拔低，放大范围对α的影响
        "    float rangeFactor = ocean_remap( ocean_v_msl, -10000.0, 10000.0, 10.0, 1.0 ); \n"

        // 影响α基于相机的距离
        "    float rangeEffect = ocean_remap(\n"
        "       ocean_v_range,\n"
        "       ocean_max_range - ocean_fade_range, ocean_max_range * rangeFactor,\n"
        "       1.0, 0.0); \n"

        // 地形掩码效果[0..1] in the alpha component.
        "    float maskEffect = texture2D(ocean_data, ocean_mask_tex_coord.xy).a; \n"

		"float lod = oceanLod;\n"
		"vec2 uv = oceanUv;\n"
		"vec3 dPdu = oceanDPdu;\n"
		"vec3 dPdv = oceanDPdv;\n"
		"float sigmaSq = oceanSigmaSq;\n"

		"float iMAX = min(ceil((log2(NYQUIST_MAX * lod) - lods.z) * lods.w), nbWaves - 1.0);\n" 
		"float iMax = floor((log2(NYQUIST_MIN * lod) - lods.z) * lods.w);\n" 
		"float iMin = max(0.0, floor((log2(NYQUIST_MIN * lod / lods.x) - lods.z) * lods.w));\n" 
		"for (float i = iMin; i <= iMAX; i += 1.0) {\n" 
        "	vec4 wt = textureLod(wavesSampler, (i + 0.5) / nbWaves, 0.0);\n" 
        "	float phase = wt.y * time - dot(wt.zw, uv);\n" 
        "	float s = sin(phase);\n" 
        "	float c = cos(phase);\n" 
        "	float overk = g / (wt.y * wt.y);\n" 

        "	float wm = smoothstep(NYQUIST_MIN, NYQUIST_MAX, (2.0 * PI) * overk / lod);\n" 
        "	float wn = smoothstep(NYQUIST_MIN, NYQUIST_MAX, (2.0 * PI) * overk / lod * lods.x);\n" 

        "	vec3 factor = (1.0 - wm) * wn * wt.x * vec3(wt.zw * overk, 1.0);\n" 

        "	vec3 dPd = factor * vec3(c, c, -s);\n" 
        "	dPdu -= dPd * wt.z;\n" 
        "	dPdv -= dPd * wt.w;\n" 
        "	wt.zw *= overk;\n" 
        "	float kh = i < iMax ? wt.x / overk : 0.0;\n" 
        "	float wkh = (1.0 - wn) * kh;\n" 
        "	sigmaSq -= wt.z * wt.z * (sqrt(1.0 - wkh * wkh) - sqrt(1.0 - kh * kh));\n" 
		"}\n" 

		"vec3 earthCamera = vec3(0.0, 0.0, ocean_h_camera + ocean_dRadius);\n" 
		"vec3 earthP = ocean_dRadius > 0.0 ? normalize(oceanP + vec3(0.0, 0.0, ocean_dRadius)) * (ocean_dRadius + 10.0) : oceanP;\n" 
		"vec3 oceanCamera = vec3(0.0, 0.0, ocean_h_camera);\n" 
		"vec3 V = normalize(oceanCamera - oceanP);\n" 
		"vec3 N = normalize(cross(dPdu, dPdv));\n" 
		"if (dot(V, N) < 0.0) {\n" 
        "	N = reflect(N, V); \n" 
		"}\n" 

		//太阳的光辉颜色
		"vec3 sunL;\n" 
		//天空发光的颜色
		"vec3 skyE;\n" 
		"vec3 extinction;\n" 
		"sunRadianceAndSkyIrradiance(earthP, N, oceanSunDir, sunL, skyE);\n" 

		"vec3 Lsun = wardReflectedSunRadiance(oceanSunDir, V, N, sigmaSq) * sunL;\n" 
		"vec3 Lsky = meanFresnel(V, N, sigmaSq) * skyE / PI;\n" 
		"vec3 Lsea = refractedSeaRadiance(V, N, sigmaSq) * seaColor * skyE / PI;\n" 

		"vec3 surfaceColor = Lsun + Lsky + Lsea;\n" 

		"vec3 inscatter = inScattering(earthCamera, earthP, oceanSunDir, extinction, 0.0);\n" 
		"vec3 finalColor = surfaceColor * extinction + inscatter;\n" 

		"    color = vec4( hdr(finalColor), 1.0 ); \n"
		//"    color = vec4( 1.0, 0.0, 0.0, 1.0 ); \n"
        "} \n";
